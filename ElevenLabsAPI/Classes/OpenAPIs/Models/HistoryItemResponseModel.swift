//
// HistoryItemResponseModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct HistoryItemResponseModel: Codable, JSONEncodable, Hashable {

    public enum State: String, Codable, CaseIterable {
        case created = "created"
        case deleted = "deleted"
        case processing = "processing"
    }
    public var historyItemId: String
    public var voiceId: String
    public var voiceName: String
    public var text: String
    public var dateUnix: Int
    public var characterCountChangeFrom: Int
    public var characterCountChangeTo: Int
    public var contentType: String
    public var state: State

    public init(historyItemId: String, voiceId: String, voiceName: String, text: String, dateUnix: Int, characterCountChangeFrom: Int, characterCountChangeTo: Int, contentType: String, state: State) {
        self.historyItemId = historyItemId
        self.voiceId = voiceId
        self.voiceName = voiceName
        self.text = text
        self.dateUnix = dateUnix
        self.characterCountChangeFrom = characterCountChangeFrom
        self.characterCountChangeTo = characterCountChangeTo
        self.contentType = contentType
        self.state = state
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case historyItemId = "history_item_id"
        case voiceId = "voice_id"
        case voiceName = "voice_name"
        case text
        case dateUnix = "date_unix"
        case characterCountChangeFrom = "character_count_change_from"
        case characterCountChangeTo = "character_count_change_to"
        case contentType = "content_type"
        case state
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(historyItemId, forKey: .historyItemId)
        try container.encode(voiceId, forKey: .voiceId)
        try container.encode(voiceName, forKey: .voiceName)
        try container.encode(text, forKey: .text)
        try container.encode(dateUnix, forKey: .dateUnix)
        try container.encode(characterCountChangeFrom, forKey: .characterCountChangeFrom)
        try container.encode(characterCountChangeTo, forKey: .characterCountChangeTo)
        try container.encode(contentType, forKey: .contentType)
        try container.encode(state, forKey: .state)
    }
}

